version: "1"
capabilities:
    - contract_id: "abesh:httpserver2"
      values:
        host: "0.0.0.0"
        port: "8080"
        default_request_timeout: "5s"
        default_content_type: "application/json"
        default_404_handler_enabled: "true"
        s500m: |
            {
                "status_code": "SE_500",
                "error_code": 9999,
                "error_prefix": "SE_500",
                "detail": "500 ERROR"
            }
        s404m: |
            {
                "status_code": "SE_404",
                "error_code": 9999,
                "error_prefix": "SE_404",
                "detail": "404 ERROR"
            }
        s403m: |
            {
                "status_code": "SE_403",
                "error_code": 9999,
                "error_prefix": "SE_403",
                "detail": "403 ERROR"
            }
        s405m: |
            {
                "status_code": "SE_405",
                "error_code": 9999,
                "error_prefix": "SE_405",
                "detail": "405 ERROR"
            }
        s408m: |
            {
                "status_code": "SE_408",
                "error_code": 9999,
                "error_prefix": "SE_408",
                "detail": "408 ERROR"
            }
        s499m: |
            {
                "status_code": "SE_499",
                "error_code": 9999,
                "error_prefix": "SE_499",
                "detail": "499 ERROR"
            }
    - contract_id: "golang:jwtauth"
      values:
        verification_timeout: 1s
    - contract_id: "golang:jwtauth:lib"
      values:
        verification_timeout: 1s
    - contract_id: "golang:jwtauth:sso:lib"
      values:
        verification_timeout: 1s
    - contract_id: "golang:jwtauth:mixed"
    - contract_id: "abesh:httpclient"
    - contract_id: "golang:kvredis"
    - contract_id: "cdfs:tokenvm:cm"
    - contract_id: "cdfs:tokenvm"
      values:
        algorithm: "RS512"
        dao: "pg"
        use_cache: false
        service_access_token_lifetime: 24h
        service_refresh_token_lifetime: 7d
    - contract_id: "cdfs:txnvm:cm"
    - contract_id: "cdfs:txnvm"
      values:
        dao: "pg"
    - contract_id: "cdfs:txne:token"
      values:
        print_based_debug_enabled: false
        manual_reversal_enabled: false
    - contract_id: "cdfs:txne:access_token"
    # MUTATION #
    - contract_id: "cdfs:txne:freeze"
    - contract_id: "cdfs:txne:unfreeze"
    - contract_id: "cdfs:txne:finalizeFromFrozen"
    - contract_id: "cdfs:txne:finalize"
    - contract_id: "cdfs:txne:reversal"
    - contract_id: "cdfs:txne:onboard"
    - contract_id: "cdfs:txne:bulkOnboard"
    - contract_id: "cdfs:txne:updateTrustLevel"
    # QUERY #
    - contract_id: "cdfs:txne:getBalance"
      # MUTATION END #
    - contract_id: "cdfs:txne:getBalance2"
      new_contract_id: "cdfs:txne:getBalance2:mixed"
      values:
        is_cs_balance: false
        is_mixed_balance: true
    - contract_id: "cdfs:txne:getBalance2"
      new_contract_id: "cdfs:txne:getBalance2:primary"
      values:
        is_cs_balance: false
        is_mixed_balance: false
    - contract_id: "cdfs:txne:getBalance2"
      new_contract_id: "cdfs:txne:getBalance2:cs"
      values:
        is_cs_balance: true
    - contract_id: "cdfs:txne:getBulkBalanceSafe"
    - contract_id: "cdfs:txne:getBulkDuplicateTransactionTrackerStateSafe"
    - contract_id: "cdfs:txne:getBulkTransactionIdBatchIdFreezeMapSafe"
    - contract_id: "cdfs:txne:getBulkTransactionIdBatchIdMapSafe"
    - contract_id: "cdfs:txne:getBulkTransactionIdBatchIdReversalMapSafe"
    - contract_id: "cdfs:txne:getBulkTransactionIdBatchIdUnfreezeMapSafe"
    - contract_id: "cdfs:txne:getBulkWALFreezeSafe"
    - contract_id: "cdfs:txne:getBulkWALSafe"
    - contract_id: "cdfs:txne:getBulkWALUnfreezeSafe"
    - contract_id: "cdfs:txne:getWAL"
    - contract_id: "cdfs:txne:getWALFreeze"
    - contract_id: "cdfs:txne:getWALUnfreeze"
    - contract_id: "cdfs:txne:walCount"
    - contract_id: "cdfs:txne:iterateWAL"
    - contract_id: "cdfs:txne:iterateWAL2"
    - contract_id: "cdfs:txne:jwks"
    - contract_id: "cdfs:txne:getSavingData"
    # INTERNAL QUERY #
    - contract_id: "cdfs:txne:txnvm:health"
      # QUERY END #
    - contract_id: "cdfs:txne:tokenvm:health"
    - contract_id: "cdfs:txne:health"
# INTERNAL QUERY END #

triggers:
    - trigger: "abesh:httpserver2"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/token"
      service: "cdfs:txne:token"
    - trigger: "abesh:httpserver2"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/accessToken"
      service: "cdfs:txne:access_token"
    # MUTATION #
    - trigger: "abesh:httpserver2"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/freeze"
      service: "cdfs:txne:freeze"
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:unfreeze"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/unfreeze"
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:finalizeFromFrozen"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/finalizeFromFrozen"
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:finalize"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/finalize"
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:reversal"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/reversal"
    - trigger: "abesh:httpserver2"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/onboard"
      service: "cdfs:txne:onboard"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.mutation" in claims.Set.permission
    - trigger: "abesh:httpserver2"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/bulkOnboard"
      service: "cdfs:txne:bulkOnboard"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.mutation" in claims.Set.permission
    # QUERY #
    - trigger: "abesh:httpserver2"
      # MUTATION END #

      service: "cdfs:txne:getBalance"
      trigger_values:
        method: "GET"
        path: "/cdfs/txne/v1/getBalance"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.query" in claims.Set.permission
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:getBalance2:mixed"
      trigger_values:
        method: "GET"
        path: "/cdfs/txne/ussd/internal/v1/account/mixed-balance"
      authorizer: "golang:jwtauth:mixed"
      authorizer_expression: |
        claims.Valid(Now())
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:getBalance2:primary"
      trigger_values:
        method: "GET"
        path: "/cdfs/txne/ussd/internal/v1/account/balance"
      authorizer: "golang:jwtauth:mixed"
      authorizer_expression: |
        claims.Valid(Now())
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:getBalance2:cs"
      trigger_values:
        method: "GET"
        path: "/cdfs/kyc/balance"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access"
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:getBulkBalanceSafe"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/getBulkBalanceSafe"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.query" in claims.Set.permission
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:getBulkDuplicateTransactionTrackerStateSafe"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/getBulkDuplicateTransactionTrackerStateSafe"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.query" in claims.Set.permission
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:getBulkTransactionIdBatchIdFreezeMapSafe"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/getBulkTransactionIdBatchIdFreezeMapSafe"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.query" in claims.Set.permission
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:getBulkTransactionIdBatchIdMapSafe"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/getBulkTransactionIdBatchIdMapSafe"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.query" in claims.Set.permission
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:getBulkTransactionIdBatchIdReversalMapSafe"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/getBulkTransactionIdBatchIdReversalMapSafe"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.query" in claims.Set.permission
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:getBulkTransactionIdBatchIdUnfreezeMapSafe"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/getBulkTransactionIdBatchIdUnfreezeMapSafe"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.query" in claims.Set.permission
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:getBulkWALFreezeSafe"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/getBulkWALFreezeSafe"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.query" in claims.Set.permission
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:getBulkWALSafe"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/getBulkWALSafe"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.query" in claims.Set.permission
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:getBulkWALUnfreezeSafe"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/getBulkWALUnfreezeSafe"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.query" in claims.Set.permission
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:getWAL"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/getWAL"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.query" in claims.Set.permission
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:getWALFreeze"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/getWALFreeze"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.query" in claims.Set.permission
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:getWALUnfreeze"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/getWALUnfreeze"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.query" in claims.Set.permission
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:walCount"
      trigger_values:
        method: "GET"
        path: "/cdfs/txne/v1/walCount"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.query" in claims.Set.permission
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:iterateWAL"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/iterateWAL"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.query" in claims.Set.permission
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:iterateWAL2"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/iterateWAL2"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.query" in claims.Set.permission
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:jwks"
      trigger_values:
        method: "GET"
        path: "/cdfs/txne/v1/.well-known/jwks.json"
    # INTERNAL QUERY #
    - trigger: "abesh:httpserver2"
      # QUERY END #

      service: "cdfs:txne:txnvm:health"
      trigger_values:
        method: "GET"
        path: "/_cdfs/txne/v1/txnvm/health"
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:tokenvm:health"
      trigger_values:
        method: "GET"
        path: "/_cdfs/txne/v1/tokenvm/health"
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:health"
      trigger_values:
        method: "GET"
        path: "/_cdfs/txne/v1/health"
    # INTERNAL MUTATION #
    - trigger: "abesh:httpserver2"
      # INTERNAL QUERY END #

      service: "cdfs:txne:updateTrustLevel"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/updateTrustLevel"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.mutation" in claims.Set.permission
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:updateTrustLevel"
      trigger_values:
        method: "POST"
        path: "/_cdfs/txne/v1/updateTrustLevel"
    - trigger: "abesh:httpserver2"
      trigger_values:
        method: "POST"
        path: "/_cdfs/txne/v1/onboard"
      service: "cdfs:txne:onboard"
    - trigger: "abesh:httpserver2"
      trigger_values:
        method: "POST"
        path: "/_cdfs/txne/v1/bulkOnboard"
      service: "cdfs:txne:bulkOnboard"
    - trigger: "abesh:httpserver2"
      service: "cdfs:txne:getSavingData"
      trigger_values:
        method: "POST"
        path: "/cdfs/txne/v1/getSavingData"
      authorizer: "golang:jwtauth"
      authorizer_expression: |
        claims.Valid(Now()) && claims.Set.token_type=="service_user_access" && "cdfs:txne.query" in claims.Set.permission
    
# INTERNAL MUTATION END #

# START ALL CONTRACT#
start:
    - "abesh:httpserver2"
